// Generated by CoffeeScript 1.6.3
(function() {
  var BaseModel, Email, flashError, mergeEmails, privKey, toggleLoading,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  BaseModel = (function() {
    function BaseModel() {}

    BaseModel.prototype.humanize = function(keys) {
      var key, swap, _i, _len, _results,
        _this = this;
      swap = function(key) {
        return _this['_' + key] = _this[key];
      };
      _results = [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        _results.push(swap(key));
      }
      return _results;
    };

    BaseModel.prototype.dehumanize = function(keys) {
      var key, swap, _i, _len, _results,
        _this = this;
      swap = function(key) {
        if (_this['_' + key] == null) {
          return;
        }
        delete _this[key];
        _this[key] = _this['_' + key];
        return delete _this['_' + key];
      };
      _results = [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        _results.push(swap(key));
      }
      return _results;
    };

    return BaseModel;

  })();

  Email = (function(_super) {
    __extends(Email, _super);

    function Email(id, email, _key) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
      this.id = id;
      this._key = _key;
      this.user = (_ref = email != null ? email.user : void 0) != null ? _ref : null;
      this.date = (_ref1 = email != null ? email.date : void 0) != null ? _ref1 : null;
      this.from = (_ref2 = email != null ? email.from : void 0) != null ? _ref2 : null;
      this.subject = (_ref3 = email != null ? email.subject : void 0) != null ? _ref3 : null;
      this.body = (_ref4 = email != null ? email.body : void 0) != null ? _ref4 : null;
      this.signature = (_ref5 = email != null ? email.signature : void 0) != null ? _ref5 : null;
      this.pubKey = (_ref6 = email != null ? email.pubKey : void 0) != null ? _ref6 : null;
      this.read = (_ref7 = email != null ? email.read : void 0) != null ? _ref7 : false;
      this.processed = (_ref8 = email != null ? email.processed : void 0) != null ? _ref8 : false;
    }

    Email.prototype.sign = function(signingKey) {
      var corpus;
      corpus = {
        subject: this._subject,
        body: this._body
      };
      corpus = sjcl.hash.sha256.hash(JSON.stringify(corpus));
      this.signature = signingKey.sign(corpus, 10);
      return this.signature = sjcl.codec.base64.fromBits(this.signature);
    };

    Email.prototype.verify = function() {
      var corpus, ok;
      corpus = {
        subject: this._subject,
        body: this._body
      };
      corpus = sjcl.hash.sha256.hash(JSON.stringify(corpus));
      ok = this.pubKey.ecdsa.verify(corpus, sjcl.codec.base64.toBits(this.signature));
      return ok;
    };

    Email.prototype.humanize = function() {
      Email.__super__.humanize.call(this, ['from', 'subject', 'body', 'pubKey']);
      this._decrypted = {
        from: null,
        subject: null,
        body: null,
        pubKey: null
      };
      this.__defineGetter__('from', function() {
        if (this._decrypted.from == null) {
          this._decrypted.from = sjcl.decrypt(this._key, this._from);
        }
        return this._decrypted.from;
      });
      this.__defineSetter__('from', function(from) {
        this._decrypted.from = from;
        return this._from = sjcl.encrypt(this._key, from);
      });
      this.__defineGetter__('subject', function() {
        if (this._decrypted.subject == null) {
          this._decrypted.subject = sjcl.decrypt(this._key, this._subject);
        }
        return this._decrypted.subject;
      });
      this.__defineSetter__('subject', function(subject) {
        this._decrypted.subject = subject;
        return this._subject = sjcl.encrypt(this._key, subject);
      });
      this.__defineGetter__('body', function() {
        if (this._decrypted.body == null) {
          this._decrypted.body = sjcl.decrypt(this._key, this._body);
        }
        return this._decrypted.body;
      });
      this.__defineSetter__('body', function(body) {
        this._decrypted.body = body;
        return this._body = sjcl.encrypt(this._key, body);
      });
      this.__defineGetter__('pubKey', function() {
        var pub;
        if (this._decrypted.pubKey == null) {
          pub = JSON.parse(sjcl.decrypt(this._key, this._pubKey));
          pub.elGamal = sjcl.ecc.deserialize(pub.elGamal);
          pub.ecdsa = sjcl.ecc.deserialize(pub.ecdsa);
          this._decrypted.pubKey = pub;
        }
        return this._decrypted.pubKey;
      });
      return this.__defineSetter__('pubKey', function(pubKey) {
        this._decrypted.pubKey = pubKey;
        pubKey.elGamal = pubKey.elGamal.serialize();
        pubKey.ecdsa = pubKey.ecdsa.serialize();
        pubKey = JSON.stringify(pubKey);
        return this._pubKey = sjcl.encrypt(this._key, pubKey);
      });
    };

    Email.prototype.dehumanize = function() {
      return Email.__super__.dehumanize.call(this, ['from', 'subject', 'body', 'pubKey']);
    };

    return Email;

  })(BaseModel);

  flashError = function() {
    return $('#error').show('slow', function() {
      var hide;
      hide = function() {
        return $('#error').hide('slow');
      };
      return setTimeout(hide, 3000);
    });
  };

  toggleLoading = function() {
    return $('#loading').toggle('slow');
  };

  mergeEmails = function(emails) {
    var corpus, email, index, indexes, key, max, out, token, tokens, _i, _j, _len, _len1, _ref, _ref1;
    _ref = [0, []], max = _ref[0], indexes = _ref[1];
    for (_i = 0, _len = emails.length; _i < _len; _i++) {
      email = emails[_i];
      index = {};
      try {
        if (email.processed) {
          email = new Email(email.id, email, window.dataKey);
        } else {
          email = new Email(email.id, email, window.privKey.elGamal);
        }
        email.humanize();
        if (!email.processed) {
          email.verify();
        }
        corpus = email.from + ' ' + email.subject + ' ' + email.body;
        if (corpus.length > max) {
          max = corpus.length;
        }
        tokens = sjcl.searchable.tokenize(corpus);
        for (_j = 0, _len1 = tokens.length; _j < _len1; _j++) {
          token = tokens[_j];
          index[token] = email.id;
        }
        indexes.push(index);
      } catch (_error) {
        continue;
      }
    }
    out = (_ref1 = sjcl.searchable).secureIndex.apply(_ref1, [window.searchKeys, max].concat(__slice.call(indexes)));
    key = {
      search: window.searchKeys,
      data: window.dataKey,
      email: {
        elGamal: window.privKey.elGamal.serialize(),
        ecdsa: window.privKey.ecdsa.serialize()
      }
    };
    key = sjcl.encrypt(window.localStorage.pass, JSON.stringify(key));
    return [out, key];
  };

  /* Functions to secure forms.*/


  window.signin = function(form) {
    var pass;
    pass = form.pass.value;
    window.localStorage.pass = pass;
    form.pass.value = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(pass));
    return true;
  };

  window.register = function(form) {
    var ecdsa, elGamal, pass, privKey, pubKey;
    pass = form.pass.value;
    window.localStorage.pass = pass;
    form.pass.value = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(pass));
    elGamal = sjcl.ecc.elGamal.generateKeys(256, 10);
    ecdsa = sjcl.ecc.ecdsa.generateKeys(256, 10);
    pubKey = {
      elGamal: elGamal.pub.serialize(),
      ecdsa: ecdsa.pub.serialize()
    };
    form.pubKey.value = JSON.stringify(pubKey);
    privKey = {
      elGamal: elGamal.sec.serialize(),
      ecdsa: ecdsa.sec.serialize()
    };
    privKey = {
      email: privKey,
      search: {}
    };
    privKey.data = sjcl.codec.base64.fromBits(sjcl.random.randomWords(8, 10));
    form.privKey.value = sjcl.encrypt(pass, JSON.stringify(privKey));
    return true;
  };

  window.changePassword = function(form) {
    var pass, privKey;
    privKey = sjcl.decrypt(window.localStorage.pass, form.privKey.value);
    pass = form.pass.value;
    window.localStorage.pass = pass;
    form.pass.value = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(pass));
    form.privKey.value = sjcl.encrypt(window.localStorage.pass, privKey);
    return true;
  };

  window.compose = function(form) {
    var curve, e, email, encryptionKey, pub;
    try {
      if (window.toPubKey == null) {
        throw 'Invalid destination address.';
      }
      pub = JSON.parse(window.toPubKey);
      curve = sjcl.ecc.curves.c256;
      encryptionKey = sjcl.ecc.deserialize(pub.elGamal);
      window.pubKey = JSON.parse(window.pubKey);
      window.pubKey.elGamal = sjcl.ecc.deserialize(window.pubKey.elGamal);
      window.pubKey.ecdsa = sjcl.ecc.deserialize(window.pubKey.ecdsa);
      email = new Email(null, null, encryptionKey);
      email.humanize();
      email.from = window.from;
      email.subject = form.subject.value;
      email.body = form.body.value;
      email.pubKey = window.pubKey;
      email.sign(window.privKey.ecdsa);
      email.dehumanize();
      form.from.value = email.from;
      form.subject.value = email.subject;
      form.body.value = email.body;
      form.signature.value = email.signature;
      form.pubKey.value = email.pubKey;
      return true;
    } catch (_error) {
      e = _error;
      alert(e);
      return false;
    }
  };

  window.view = function(id) {
    var email, footer;
    email = window.cache[id];
    footer = 'From ' + email.from + ' on ' + email.date;
    $('#view-subj').text(email.subject);
    $('#view-body').text(email.body);
    $('#view-footer').text(footer);
    $('#view').modal();
    if (!email.read) {
      document.getElementById(email.id).className = '';
      return window.socket.emit('read', email.id);
    }
  };

  /* Manage server interactions*/


  window.getPubKey = function(input) {
    var statusIcon, _ref;
    if (window.socket == null) {
      return alert('Could not contact server!');
    }
    if (window.to === input.value) {
      return;
    }
    _ref = [input.value, null], window.to = _ref[0], window.toPubKey = _ref[1];
    statusIcon = document.getElementById('to-status-icon');
    statusIcon.className = 'glyphicon glyphicon-refresh';
    window.socket.emit('pubKey', input.value);
    return window.socket.once('pubKey', function(pubKey) {
      if (pubKey !== false) {
        statusIcon.className = 'glyphicon glyphicon-ok';
        return window.toPubKey = pubKey;
      } else {
        return statusIcon.className = 'glyphicon glyphicon-remove';
      }
    });
  };

  window.fetch = function() {
    toggleLoading();
    window.socket.emit('fetch');
    window.socket.on('fetch', function(emails) {
      var email, key, newIds, out, _i, _len, _ref;
      if (emails.length === 0) {
        toggleLoading();
        flashError();
        return;
      }
      newIds = [];
      for (_i = 0, _len = emails.length; _i < _len; _i++) {
        email = emails[_i];
        newIds.push(email.id);
      }
      _ref = mergeEmails(emails), out = _ref[0], key = _ref[1];
      window.socket.emit('index', newIds, out.newDomain, [], out.index, key);
      return window.socket.once('done', function() {
        var email2, email3, err, _j, _len1;
        out = [];
        for (_j = 0, _len1 = emails.length; _j < _len1; _j++) {
          email = emails[_j];
          email = new Email(email.id, email, window.privKey.elGamal);
          email.humanize();
          try {
            email.verify();
          } catch (_error) {
            err = _error;
            continue;
          }
          email2 = new Email(email.id, null, window.dataKey);
          email2.humanize();
          email2.from = email.from;
          email2.subject = email.subject;
          email2.body = email.body;
          email2.pubKey = email.pubKey;
          email2.dehumanize();
          email3 = {
            id: email.id,
            date: email.date,
            from: email2.from,
            subject: email2.subject,
            body: email2.body,
            pubKey: email2.pubKey
          };
          out.push(email3);
        }
        window.socket.emit('process', out);
        return window.socket.once('process', function() {
          return window.location = '/inbox';
        });
      });
    });
    return false;
  };

  window.page = function(i) {
    $('#emails tbody').html('<tr></tr>');
    $('#pagination').html('<li class="disabled"><a href="#">&laquo;</a></li>');
    return window.socket.emit('page', i);
  };

  window.delEmail = function(id) {
    var sure;
    sure = confirm('Are you sure you want to delete this email?');
    if (sure) {
      window.socket.emit('delete', id);
      return window.socket.once('delete', function() {
        return window.location = '/inbox';
      });
    }
  };

  if (window.privKey != null) {
    privKey = JSON.parse(sjcl.decrypt(window.localStorage.pass, window.privKey));
    window.searchKeys = privKey.search;
    window.dataKey = privKey.data;
    privKey = privKey.email;
    privKey.elGamal = sjcl.ecc.deserialize(privKey.elGamal);
    privKey.ecdsa = sjcl.ecc.deserialize(privKey.ecdsa);
    window.privKey = privKey;
    window.socket = io.connect('http://localhost:3000');
    window.socket.emit('login', window.tag);
    window.socket.on('authed', function() {
      return window.socket.emit('page', 1);
    });
  }

  window.socket.on('page', function(p, emails, pages) {
    var c, i, last, li, loadEmail;
    loadEmail = function(i) {
      var c, cb, email, err, tr;
      if (emails[i] == null) {
        return;
      }
      email = new Email(emails[i].id, emails[i], window.dataKey);
      email.humanize();
      window.cache[email.id] = email;
      c = !email.read ? 'warning' : '';
      cb = 'onclick="window.view(\'' + email.id + '\')"';
      tr = '<tr id="' + email.id + '" style="display: none" class="' + c + '">';
      tr = tr + '<td id="from-' + email.id + '" ' + cb + '></td>';
      tr = tr + '<td id="subj-' + email.id + '" ' + cb + '></td>';
      tr = tr + '<td id="date-' + email.id + '" ' + cb + '></td>';
      tr = tr + '<td><button type="button" class="close" ';
      tr = tr + 'onclick="window.delEmail(\'' + email.id + '\')">&times;';
      tr = tr + '</button></td></tr>';
      $('#emails tr:last').after(tr);
      try {
        $('#from-' + email.id).text(email.from);
        $('#subj-' + email.id).text(email.subject);
        $('#date-' + email.id).text(email.date);
      } catch (_error) {
        err = _error;
        alert('Modified contents.');
      }
      return $('#' + email.id).show(100, function() {
        return loadEmail(i + 1);
      });
    };
    if (emails.length !== 0) {
      $('#emails').show('fast', function() {
        return loadEmail(0);
      });
      i = 1;
      while (!(i > pages)) {
        c = i === p ? 'disabled' : '';
        li = '<li class="' + c + '"><a href="#" onclick="window.page(' + i + ')">' + i + '</a></li>';
        $('#pagination li:last').after(li);
        ++i;
      }
      last = '<li class="disabled"><a href="#">&raquo;</a></li>';
      return $('#pagination li:last').after(last);
    } else {
      $('#pagination').remove();
      return flashError();
    }
  });

  window.socket.on('index', function(newIds, reps, emails) {
    var key, out, _ref;
    _ref = mergeEmails(emails), out = _ref[0], key = _ref[1];
    return window.socket.emit('index', newIds, out.newDomain, reps, out.index, key);
  });

}).call(this);
