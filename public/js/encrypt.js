// Generated by CoffeeScript 1.6.3
(function() {
  var decryptEmail, privKey,
    __slice = [].slice;

  decryptEmail = function(privKey, email) {
    var corpus, e, ok, pubKey;
    try {
      email.from = sjcl.decrypt(privKey, email.from);
      email.subject = sjcl.decrypt(privKey, email.subject);
      email.body = sjcl.decrypt(privKey, email.body);
      email.pubKey = JSON.parse(sjcl.decrypt(privKey, email.pubKey));
    } catch (_error) {
      e = _error;
      return [{}, 'Bad'];
    }
    pubKey = sjcl.ecc.deserialize(email.pubKey.ecdsa);
    corpus = {
      subject: email.subject,
      body: email.body
    };
    corpus = sjcl.hash.sha256.hash(JSON.stringify(corpus));
    try {
      ok = pubKey.verify(corpus, sjcl.codec.base64.toBits(email.signature));
      return [email, null];
    } catch (_error) {
      e = _error;
      email.subject += '  (Modified Contents!)';
      return [email, 'Bad'];
    }
  };

  /* Functions to secure forms.*/


  window.signin = function(form) {
    var pass;
    pass = form.pass.value;
    window.localStorage.pass = pass;
    form.pass.value = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(pass));
    return true;
  };

  window.register = function(form) {
    var ecdsa, elGamal, pass, privKey, pubKey;
    pass = form.pass.value;
    window.localStorage.pass = pass;
    form.pass.value = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(pass));
    elGamal = sjcl.ecc.elGamal.generateKeys(256, 10);
    ecdsa = sjcl.ecc.ecdsa.generateKeys(256, 10);
    pubKey = {
      elGamal: elGamal.pub.serialize(),
      ecdsa: ecdsa.pub.serialize()
    };
    form.pubKey.value = JSON.stringify(pubKey);
    privKey = {
      elGamal: elGamal.sec.serialize(),
      ecdsa: ecdsa.sec.serialize()
    };
    privKey = {
      email: privKey,
      search: {}
    };
    form.privKey.value = sjcl.encrypt(pass, JSON.stringify(privKey));
    return true;
  };

  window.changePassword = function(form) {
    var pass, privKey;
    privKey = sjcl.decrypt(window.localStorage.pass, form.privKey.value);
    pass = form.pass.value;
    window.localStorage.pass = pass;
    form.pass.value = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(pass));
    form.privKey.value = sjcl.encrypt(window.localStorage.pass, privKey);
    return true;
  };

  window.compose = function(form) {
    var corpus, curve, e, pub;
    try {
      if (window.toPubKey == null) {
        throw 'Invalid destination address.';
      }
      pub = JSON.parse(window.toPubKey);
      curve = sjcl.ecc.curves.c256;
      pub.elGamal = sjcl.ecc.deserialize(pub.elGamal);
      corpus = {
        subject: form.subject.value,
        body: form.body.value
      };
      corpus = sjcl.hash.sha256.hash(JSON.stringify(corpus));
      corpus = window.privKey.ecdsa.sign(corpus, 10);
      corpus = sjcl.codec.base64.fromBits(corpus);
      form.from.value = sjcl.encrypt(pub.elGamal, window.from);
      form.subject.value = sjcl.encrypt(pub.elGamal, form.subject.value);
      form.body.value = sjcl.encrypt(pub.elGamal, form.body.value);
      form.signature.value = corpus;
      form.pubKey.value = sjcl.encrypt(pub.elGamal, window.pubKey);
      return true;
    } catch (_error) {
      e = _error;
      alert(e);
      return false;
    }
  };

  window.view = function(email) {
    var corpus, footer, k, key, max, o, tokens, v, _ref;
    email = JSON.parse(unescape(email));
    footer = 'From ' + email.from + ' on ' + email.date;
    $('#view-subj').text(email.subject);
    $('#view-body').text(email.body);
    $('#view-footer').text(footer);
    $('#view').modal();
    if (!email.read) {
      document.getElementById(email.id).className = '';
      corpus = email.from + ' ' + email.subject + ' ' + email.body;
      max = corpus.length;
      tokens = sjcl.searchable.tokenize(corpus);
      o = sjcl.searchable.secureIndex(window.searchKeys, max, tokens);
      o.index.docs = [email.id];
      _ref = o.index.index;
      for (k in _ref) {
        v = _ref[k];
        if (v === o.newId) {
          o.index.index[k] = email.id;
        }
      }
      key = {
        search: window.searchKeys,
        email: {
          elGamal: window.privKey.elGamal.serialize(),
          ecdsa: window.privKey.ecdsa.serialize()
        }
      };
      key = sjcl.encrypt(window.localStorage.pass, JSON.stringify(key));
      return window.socket.emit('index', email.id, o.newDomain, [], o.index, key);
    }
  };

  /* Manage server interactions*/


  window.getPubKey = function(input) {
    var statusIcon, _ref;
    if (window.socket == null) {
      return alert('Could not contact server!');
    }
    if (window.to === input.value) {
      return;
    }
    _ref = [input.value, null], window.to = _ref[0], window.toPubKey = _ref[1];
    statusIcon = document.getElementById('to-status-icon');
    statusIcon.className = 'glyphicon glyphicon-refresh';
    window.socket.emit('pubKey', input.value);
    return window.socket.once('pubKey', function(pubKey) {
      if (pubKey !== false) {
        statusIcon.className = 'glyphicon glyphicon-ok';
        return window.toPubKey = pubKey;
      } else {
        return statusIcon.className = 'glyphicon glyphicon-remove';
      }
    });
  };

  if (window.privKey != null) {
    privKey = JSON.parse(sjcl.decrypt(window.localStorage.pass, window.privKey));
    window.searchKeys = privKey.search;
    privKey = privKey.email;
    privKey.elGamal = sjcl.ecc.deserialize(privKey.elGamal);
    privKey.ecdsa = sjcl.ecc.deserialize(privKey.ecdsa);
    window.privKey = privKey;
    window.socket = io.connect('http://localhost:3000');
    window.socket.emit('login', window.tag);
    window.socket.on('authed', function() {
      return window.socket.emit('page', 1);
    });
  }

  window.socket.on('page', function(emails) {
    var loadEmail;
    loadEmail = function(i) {
      var c, cb, email, err, tr, _ref;
      if (emails[i] == null) {
        return $('#loading').hide('fast');
      }
      email = emails[i];
      _ref = decryptEmail(window.privKey.elGamal, email), email = _ref[0], err = _ref[1];
      if (err != null) {
        c = 'warning';
      }
      c = err != null ? 'danger' : !email.read ? 'warning' : '';
      cb = 'window.view(\'' + escape(JSON.stringify(email)) + '\')';
      tr = '<tr id="' + email.id + '" onclick="' + cb + '" ';
      tr = tr + 'style="display: none" class="' + c + '">';
      tr = tr + '<td id="from-' + email.id + '">' + email.from + '</td>';
      tr = tr + '<td id="subj-' + email.id + '"></td>';
      tr = tr + '<td>' + email.date + '</td></tr>';
      $('#emails tr:last').after(tr);
      $('#from-' + email.id).text(email.from);
      $('#subj-' + email.id).text(email.subject);
      return $('#' + email.id).show(1000, function() {
        return loadEmail(i + 1);
      });
    };
    if (emails.length !== 0) {
      return $('#emails').show('fast', function() {
        return loadEmail(0);
      });
    } else {
      return $('#error').show('fast', function() {
        return $('#loading').hide('fast');
      });
    }
  });

  window.socket.on('index', function(newId, reps, emails) {
    var corpus, email, err, index, indexes, key, max, out, token, tokens, _i, _j, _len, _len1, _ref, _ref1, _ref2;
    _ref = [0, []], max = _ref[0], indexes = _ref[1];
    for (_i = 0, _len = emails.length; _i < _len; _i++) {
      email = emails[_i];
      index = {};
      _ref1 = decryptEmail(window.privKey.elGamal, email), email = _ref1[0], err = _ref1[1];
      if (err != null) {
        continue;
      }
      corpus = email.from + ' ' + email.subject + ' ' + email.body;
      if (corpus.length > max) {
        max = corpus.length;
      }
      tokens = sjcl.searchable.tokenize(corpus);
      for (_j = 0, _len1 = tokens.length; _j < _len1; _j++) {
        token = tokens[_j];
        index[token] = email.id;
      }
      indexes.push(index);
    }
    out = (_ref2 = sjcl.searchable).secureIndex.apply(_ref2, [window.searchKeys, max].concat(__slice.call(indexes)));
    key = {
      search: window.searchKeys,
      email: {
        elGamal: window.privKey.elGamal.serialize(),
        ecdsa: window.privKey.ecdsa.serialize()
      }
    };
    key = sjcl.encrypt(window.localStorage.pass, JSON.stringify(key));
    return window.socket.emit('index', newId, out.newDomain, reps, out.index, key);
  });

}).call(this);
